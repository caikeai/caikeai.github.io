<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>HenLeo&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-08-11T11:07:49.042Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>起早</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2019/08/11/Git/"/>
    <id>http://yoursite.com/2019/08/11/Git/</id>
    <published>2019-08-11T11:01:03.000Z</published>
    <updated>2019-08-11T11:07:49.042Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://images0.cnblogs.com/blog/697158/201505/071305064859837.png" alt="Git"><a id="more"></a>  </p><details><summary>常见术语解释</summary><table><thead><tr><th>术语</th><th>解释</th></tr></thead><tbody><tr><td>origin</td><td>默认远端仓库</td></tr><tr><td>master</td><td>默认开发分支</td></tr><tr><td>HEAD</td><td>默认开发分支</td></tr><tr><td>HEAD^</td><td><code>HEAD</code>父提交</td></tr><tr><td>tracked</td><td><code>git</code>已经追踪文件的修改</td></tr><tr><td>untracked</td><td>未跟踪的状态，也就是<code>git</code>不认识的新的文件</td></tr><tr><td>revert</td><td>回退</td></tr></tbody></table></details><h2 id="提交流程"><a href="#提交流程" class="headerlink" title="提交流程"></a>提交流程</h2><p>日常提交<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 跟踪改动过的文件</span><br><span class="line"># `git add &lt;file&gt;` or</span><br><span class="line"># `git add -A` or</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"># 添加 commit 信息</span><br><span class="line"># 不同团队有不同的编写 commit 信息规范，有的项目依赖 commit 的格式来做自动化处理</span><br><span class="line"># 常见格式如： `&lt;action&gt; &lt;desc content&gt;`</span><br><span class="line">git commit -m &quot;fix: message commit&quot;</span><br><span class="line"></span><br><span class="line"># 从远程仓库拉取代码，查看是否有冲突</span><br><span class="line"># 直接 git pull 可能会有冲突，可采用 rebase 代替默认的 merge 策略减少多余的 commit 提交</span><br><span class="line">git pull --rebase</span><br><span class="line"></span><br><span class="line"># 提交改动至默认的远程仓库</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line"># or 同时提交改动至指定远程仓库(orgin)和分支(develop, master)</span><br><span class="line">git push origin master develop</span><br></pre></td></tr></table></figure></p><h2 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h2><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">git add <code>change file</code></td><td style="text-align:left">git add <code>change file</code> 将其添加到 status</td></tr><tr><td style="text-align:left">git add [–all /.]</td><td style="text-align:left">添加全部改动文件</td></tr></tbody></table><h2 id="Commit"><a href="#Commit" class="headerlink" title="Commit"></a>Commit</h2><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">git commit-m <code>&lt;message&gt;</code></td><td style="text-align:left">为已经进入 <code>status(暂存更改)</code> 添加 <code>commit</code> 信息</td></tr><tr><td style="text-align:left">git commit –amend</td><td style="text-align:left">修改上一次提交的 <code>commit</code> 信息</td></tr></tbody></table><h3 id="撤销还没-push-到远程的-commit"><a href="#撤销还没-push-到远程的-commit" class="headerlink" title="撤销还没 push 到远程的 commit"></a>撤销还没 push 到远程的 commit</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 找到需要撤销的 commit 的`前一个` commit_hash(这步可以理解为找到定位的节点</span><br><span class="line"># bash 的 commit 顺序是从上(最新 commit)至下的顺序</span><br><span class="line">git log --online</span><br><span class="line"></span><br><span class="line"># 撤销 commit, 将代码恢复为前一个版本(会丢失修改)</span><br><span class="line">git reset --hard commit_hash</span><br><span class="line"></span><br><span class="line"># or 完成 commit 撤销，但不对代码进行撤销修改，可以重新提交 commit</span><br><span class="line">git reset commit_hash</span><br><span class="line"></span><br><span class="line"># 如果只 commit 了一次，想给回退到 commit 前上一个版本的话，还可以用`HEAD`代替`hash`</span><br><span class="line"># HEAD    就是本次的版本</span><br><span class="line"># HEAD~1  就是上一次的版本</span><br><span class="line">git reset HEAD~1</span><br></pre></td></tr></table></figure><h3 id="撤销已经-push-到远程的-commit"><a href="#撤销已经-push-到远程的-commit" class="headerlink" title="撤销已经 push 到远程的 commit"></a>撤销已经 push 到远程的 commit</h3><p>在使用 <code>git</code> 时，有时候我们会无意间错推了我们不想推上去的文件或者希望能够回退以前版本的时候. 这时我们可以先在本地回退到相应的版本。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 注意使用 --hard 参数会抛弃当前工作区的修改</span><br><span class="line"># 使用 --soft 参数的话会回退到之前的版本，但是保留当前工作区的修改，可以重新提交</span><br><span class="line">$ git reset --hard &lt;版本号&gt;</span><br></pre></td></tr></table></figure></p><p>为了覆盖掉远端的版本信息，使远端的仓库也回退到相应的版本，需要加上参数 <code>--force</code><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># branch: 分支</span><br><span class="line">$ git push origin &lt;branch&gt; --force</span><br></pre></td></tr></table></figure></p><h2 id="branch-and-tag"><a href="#branch-and-tag" class="headerlink" title="branch and tag"></a>branch and tag</h2><p>常用的分支和标签命令<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 查看分支</span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"># git checkout &lt;branch/tag&gt; 切换指定的分支或标签</span><br><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line"># 切换名为 gh-pages 的分支, 如果不存在这个分支就创建它</span><br><span class="line">git checkout -b &quot;gh-pages&quot;</span><br><span class="line"></span><br><span class="line"># 查看所有标签</span><br><span class="line">git tag</span><br><span class="line"></span><br><span class="line"># 基于最新提交的分支创建标签</span><br><span class="line">git tag &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"># 删除指定标签</span><br><span class="line">git tag -d &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"># 使当前的分支和远程仓库 `origin2/game` 建立关联（前提是目标分支要存在）</span><br><span class="line"># 建立关联后就可以直接使用 `git push` 命令而无需添加其他参数。</span><br><span class="line">git branch --set-upstream-to orgin2/game</span><br></pre></td></tr></table></figure></p><h2 id="history"><a href="#history" class="headerlink" title="history"></a>history</h2><p>查看 <code>git</code> 历史<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看提交历史</span><br><span class="line">git log</span><br><span class="line"></span><br><span class="line"># 使用更简洁的模式查看提交历史</span><br><span class="line">git log --oneline</span><br><span class="line"></span><br><span class="line"># 查看指定文件的提交历史</span><br><span class="line">git log -p &lt;file&gt;</span><br><span class="line"></span><br><span class="line"># 以列表的方式查看指定文件的提交历史</span><br><span class="line">git blame &lt;file&gt;</span><br></pre></td></tr></table></figure></p><h2 id="remote"><a href="#remote" class="headerlink" title="remote"></a>remote</h2><p>添加一个远程仓库<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add orgin `&lt;remote&gt;`</span><br></pre></td></tr></table></figure></p><p>将本地分支推送到存在依赖关系的远端分支，如果远端没有 <code>master</code> 分支，那会新建一个<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure></p><p>推送当前分支并建立与远程上游的跟踪<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --set-upstream origin master</span><br></pre></td></tr></table></figure></p><p>设置上游并推送至远程的 <code>master</code> 分支<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line"></span><br><span class="line"># or</span><br><span class="line">git push origin master</span><br><span class="line">git branch --set-upstream-to orgin/master</span><br></pre></td></tr></table></figure></p><h2 id="Guide"><a href="#Guide" class="headerlink" title="Guide"></a>Guide</h2><h3 id="解决-git-目录过大的问题"><a href="#解决-git-目录过大的问题" class="headerlink" title="解决 .git 目录过大的问题"></a>解决 .git 目录过大的问题</h3><blockquote><p><a href="https://www.zhihu.com/question/29769130/answer/315745139" target="_blank" rel="noopener">如何解决 GitHub 提交次数过多 .git 文件过大的问题？ - 作者：郑宇</a></p></blockquote><p>项目中上传了一些很大的文件(文件过大在 <code>git cached</code> 中占用了很大空间，可能是几百M)，经过了一段时间后又将这些文件移除，并且确定不在使用后，可以使用下面命令在树中移除它:  </p><ol><li><p>运行 gc ，生成 pack 文件（后面的 –prune=now 表示对之前的所有提交做修剪，有的时候仅仅 gc 一下.git 文件就会小很多）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git gc --prune=now</span><br></pre></td></tr></table></figure></li><li><p>找出最大的三个文件（看自己需要）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -3</span><br><span class="line"># 示例输出：</span><br><span class="line">#1debc758cf31a649c2fc5b0c59ea1b7f01416636 blob   4925660 3655422 14351</span><br><span class="line">#c43a8da9476f97e84b52e0b34034f8c2d93b4d90 blob   154188651 152549294 12546842</span><br><span class="line">#2272096493d061489349e0a312df00dcd0ec19a2 blob   155414465 153754005 1650961363</span><br></pre></td></tr></table></figure></li><li><p>查看那些大文件究竟是谁（c43a8da 是上面大文件的 hash 码）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git rev-list --objects --all | grep c43a8da</span><br><span class="line"># c43a8da9476f97e84b52e0b34034f8c2d93b4d90 data/bigfile</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>git filter-branch</code> 移除对文件的引用重写分支。因为我想删除的是一个目录(<code>Books</code>)，因此需要加上递归(<code>-r</code>)来移除 <code>Book</code> 文件夹下的文件.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --index-filter  &apos;git rm -r --cached --ignore-unmatch Books&apos; --prune-empty --tag-name-filter cat --force -- --all</span><br></pre></td></tr></table></figure></li><li><p>进行 <code>repack</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git for-each-ref --format=&apos;delete %(refname)&apos; refs/original | git update-ref --stdin</span><br><span class="line">git reflog expire --expire=now --all</span><br><span class="line">git gc --prune=now</span><br></pre></td></tr></table></figure></li><li><p>查看 pack 的空间使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git count-objects -v</span><br></pre></td></tr></table></figure></li></ol><h3 id="初始化远程仓库"><a href="#初始化远程仓库" class="headerlink" title="初始化远程仓库"></a>初始化远程仓库</h3><p>假设你已经在远程储存库上创建了新的库(<code>test</code>)，此时需要将本地项目的代码关联并推送到远程仓库上去:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cd test</span><br><span class="line"></span><br><span class="line"># 初始化 git</span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"># 添加全部改动</span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"># 添加 commit 信息</span><br><span class="line">git commit -m &quot;init message&quot;</span><br><span class="line"></span><br><span class="line"># 添加远程地址，提交代码至远程，并设置为追踪分支</span><br><span class="line">git remote add origin git@github.com:anran758/test.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></p><h3 id="清空项目的-commit-记录"><a href="#清空项目的-commit-记录" class="headerlink" title="清空项目的 commit 记录"></a>清空项目的 commit 记录</h3><p>当一个项目已经存在久远，或者说 commit 记录有很多历史遗留的问题，分支线跟地铁图似得。此时你想重置 git 线时，可以这样做:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 先从远端克隆一份仓库，不要在原先本地项目直接进行操作</span><br><span class="line">git clone git@github.com:anran758/test.git</span><br><span class="line">cd test</span><br><span class="line"></span><br><span class="line"># 创建一个临时分支</span><br><span class="line">git checkout --orphan tmp</span><br><span class="line"></span><br><span class="line"># 在新的分支中添加全部文件进去，并提交 commit</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;commit message&quot;</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">git branch -D master</span><br><span class="line"></span><br><span class="line"># 此时所处于的分支在 tmp 分支， 将 tmp 更名为 master</span><br><span class="line">git branch -m master</span><br><span class="line"></span><br><span class="line"># 强制推入远程仓库即可</span><br><span class="line">git push -f origin master</span><br></pre></td></tr></table></figure></p><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 只删除所有`untracked`的文件</span><br><span class="line"># 如果文件已经被`tracked`, 修改过的文件不会被回退</span><br><span class="line">git clean -df</span><br><span class="line"></span><br><span class="line"># 把`tracked`的文件回退到前一个版本</span><br><span class="line"># 对于`untracked`的文件(比如编译的临时文件)都不会被删除</span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line"># 撤销指定未提交的修改内容</span><br><span class="line">git checkout HEAD &lt;file&gt;</span><br></pre></td></tr></table></figure><h3 id="文件夹大小写切换"><a href="#文件夹大小写切换" class="headerlink" title="文件夹大小写切换"></a>文件夹大小写切换</h3><p>如果你提交了一个文件夹名为<code>FOO</code>，然后你现在想修改为小写的<code>foo</code>时，你会发现直接修改文件名<code>git</code>是不识别的。因为在默认情况下，<code>git</code>是不区分文件名大小写。</p><p>这时有两个解决方法：</p><p><strong>(不推荐)</strong> 直接设置 <code>git config</code> 区分大小写，但弊端在不同平台下可能会引起别的问题。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 配置仓库的大小写敏感</span><br><span class="line">$ git config core.ignorecase false</span><br></pre></td></tr></table></figure></p><p><strong>(推荐)</strong> 通过 <code>git mv</code> 方法来改名。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 回避系统对大小写的判定，先修改为其他的名字, git 会将修改自动添加到工作区上</span><br><span class="line">$ git mv FOO FOO1</span><br><span class="line"></span><br><span class="line"># 再将名字修改回小写的状态，修改后的操作会自动添加到工作区上, 这样就完成了名字的修改</span><br><span class="line">$ git mv FOO1 foo</span><br><span class="line"></span><br><span class="line"># 提交修改</span><br><span class="line">$ git commit -m &quot;Modify dir name&quot;</span><br></pre></td></tr></table></figure></p><h3 id="保留空的文件夹"><a href="#保留空的文件夹" class="headerlink" title="保留空的文件夹"></a>保留空的文件夹</h3><p>在默认情况下，<code>git</code> 会忽略掉空的文件夹。如果想要保留这个文件夹的话，可以在里面创建一个名为 <code>.gitkeep</code> 的空文件(名字是社区约定形成，也可以使用其他名字，原理上只是占个坑).</p><p>不过<code>windows</code>平台下不能直接右键创建<code>.</code>开头的文件，系统会认为文件名不合法。这时需要使用命令行或者编辑器来完成创建。</p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><p>在执行 <code>git pull origin master</code> 命令时，无法 <code>pull</code> 的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git pull</span><br><span class="line">$ fatal: refusing to merge unrelated histories</span><br><span class="line"># 原因是说在 git 2.9版本后，需要加上这句 --allow-unrelated-histories。</span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><hr><p>使用 <code>git pull</code> 遇到合并 <code>commit</code> 时，此时并不想因为合并代码多产生一条 <code>commit</code> 记录，可以将 <code>commit</code> 信息注释掉，<code>shift + :wq</code> 退出。</p><p>然后会因为自动合并失败后提示错误:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Auto-merging pages/index/index.js</span><br><span class="line">error: Empty commit message.</span><br><span class="line">Not committing merge; use &apos;git commit&apos; to complete the merge.</span><br></pre></td></tr></table></figure></p><p>撤消合并并再次拉动，使用 <code>rebase</code> 解决冲突：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git merge --abort</span><br><span class="line">$ git pull --rebase</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: fix: fixed something</span><br><span class="line">$ git push</span><br></pre></td></tr></table></figure></p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>在<code>vim</code>编辑器中，同时按住<code>shift + &lt;命令&gt;</code>即可操作对应的命令. 但按<code>a</code>进入插入模式。</p><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>:q</td><td>不保存文件，退出 <code>vi(m)</code></td></tr><tr><td>:q!</td><td>不保存文件，强制退出 <code>vi(m)</code></td></tr><tr><td>:w</td><td>保存文件但不退出 <code>vi(m)</code></td></tr><tr><td>:w file</td><td>将修改另外保存到 <code>file</code> 中，不退出 <code>vi(m)</code></td></tr><tr><td>:w!</td><td>强制保存，不推出 <code>vi(m)</code></td></tr><tr><td>:wq</td><td>保存文件并退出 <code>vi(m)</code></td></tr><tr><td>:wq!</td><td>强制保存文件，并退出 <code>vi(m)</code></td></tr><tr><td>:e!</td><td>放弃所有修改，从上次保存文件开始再编辑命令历史</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://images0.cnblogs.com/blog/697158/201505/071305064859837.png&quot; alt=&quot;Git&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Vim 快捷键 - 《鸟叔的 Linux 私房菜》</title>
    <link href="http://yoursite.com/2019/05/03/Vim-%E5%BF%AB%E6%8D%B7%E9%94%AE-%E3%80%8A%E9%B8%9F%E5%8F%94%E7%9A%84-Linux-%E7%A7%81%E6%88%BF%E8%8F%9C%E3%80%8B/"/>
    <id>http://yoursite.com/2019/05/03/Vim-快捷键-《鸟叔的-Linux-私房菜》/</id>
    <published>2019-05-03T07:09:19.000Z</published>
    <updated>2019-05-03T07:34:51.400Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1556877579251&amp;di=5e90827791864d98cf334d331e694cd0&amp;imgtype=0&amp;src=http%3A%2F%2Fwww.bkjia.com%2Fuploads%2Fallimg%2F160907%2F0H9545261-0.jpg" alt="image"><br><a id="more"></a>  </p><ul><li>第一部份：一般模式可用的按钮说明，光标移动、复制贴上、搜寻取代等  </li></ul><table bgcolor="lightyellow" border="1" cellpadding="3" cellspacing="0" width="95%">    <tbody>    <tr bgcolor="#182448">     <td colspan="2" style="color: rgb(0, 0, 136); font-size: 1.1em; text-align: center;"><font color="red">移动光标的方法</font></td>    </tr>     <tr>     <td style="text-align: center;" width="180">h 或 向左箭头键(←)</td>      <td>光标向左移动一个字符</td>    </tr>     <tr>     <td style="text-align: center;">j 或 向下箭头键(↓)</td>      <td>光标向下移动一个字符</td>    </tr>     <tr>     <td style="text-align: center;">k 或 向上箭头键(↑)</td>      <td>光标向上移动一个字符</td>    </tr>     <tr>     <td style="text-align: center;">l 或 向右箭头键(→)</td>      <td>光标向右移动一个字符</td>    </tr>     <tr>     <td colspan="2"> 如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 &quot;30j&quot; 或 &quot;30↓&quot; 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td>    </tr>     <tr>     <td style="text-align: center;">[Ctrl] + [f]</td>      <td>屏幕『向下』移动一页，相当于 [Page Down]按键 (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">[Ctrl] + [b]</td>      <td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">[Ctrl] + [d]</td>      <td>屏幕『向下』移动半页</td>    </tr>     <tr>     <td style="text-align: center;">[Ctrl] + [u]</td>      <td>屏幕『向上』移动半页</td>    </tr>     <tr>     <td style="text-align: center;">+</td>      <td>光标移动到非空格符的下一列</td>    </tr>     <tr>     <td style="text-align: center;">-</td>      <td>光标移动到非空格符的上一列</td>    </tr>     <tr>     <td style="text-align: center;">n&lt;space&gt;</td>      <td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20&lt;space&gt; 则光标会向后面移动 20 个字符距离。</td>    </tr>     <tr>     <td style="text-align: center;">0 或功能键[Home]</td>      <td>这是数字『 0 』：移动到这一行的最前面字符处 (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">$ 或功能键[End]</td>      <td>移动到这一行的最后面字符处(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">H</td>      <td>光标移动到这个屏幕的最上方那一行的第一个字符</td>    </tr>     <tr>     <td style="text-align: center;">M</td>      <td>光标移动到这个屏幕的中央那一行的第一个字符</td>    </tr>     <tr>     <td style="text-align: center;">L</td>      <td>光标移动到这个屏幕的最下方那一行的第一个字符</td>    </tr>     <tr>     <td style="text-align: center;">G</td>      <td>移动到这个档案的最后一行(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">nG</td>      <td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td>    </tr>     <tr>     <td style="text-align: center;">gg</td>      <td>移动到这个档案的第一行，相当于 1G 啊！ (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">n&lt;Enter&gt;</td>      <td>n 为数字。光标向下移动 n 行(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr bgcolor="#182448">     <td colspan="2" style="color: rgb(0, 0, 136); font-size: 1.1em; text-align: center;"><font color="red">搜寻与取代</font></td>    </tr>     <tr>     <td style="text-align: center;">/word</td>      <td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">?word</td>      <td>向光标之上寻找一个字符串名称为 word 的字符串。</td>    </tr>     <tr>     <td style="text-align: center;">n</td>      <td>这个 n 是英文按键。代表『<u>重复前一个搜寻的动作</u>』。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td>    </tr>     <tr>     <td style="text-align: center;">N</td>      <td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td>    </tr>     <tr>     <td colspan="2"> 使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！ </td>    </tr>     <tr>     <td style="text-align: center;">:n1,n2s/word1/word2/g</td>      <td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则：<br> 『:100,200s/vbird/VBIRD/g』。(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">:1,$s/word1/word2/g</td>      <td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">:1,$s/word1/word2/gc</td>      <td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr bgcolor="#182448">     <td colspan="2" style="color: rgb(0, 0, 136); font-size: 1.1em; text-align: center;"><font color="red">删除、复制与贴上</font></td>    </tr>     <tr>     <td style="text-align: center;">x, X</td>      <td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">nx</td>      <td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td>    </tr>     <tr>     <td style="text-align: center;">dd</td>      <td>删除游标所在的那一整列(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">ndd</td>      <td>n 为数字。删除光标所在的向下 n 列，例如 20dd 则是删除 20 列 (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">d1G</td>      <td>删除光标所在到第一行的所有数据</td>    </tr>     <tr>     <td style="text-align: center;">dG</td>      <td>删除光标所在到最后一行的所有数据</td>    </tr>     <tr>     <td style="text-align: center;">d$</td>      <td>删除游标所在处，到该行的最后一个字符</td>    </tr>     <tr>     <td style="text-align: center;">d0</td>      <td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td>    </tr>     <tr>     <td style="text-align: center;">yy</td>      <td>复制游标所在的那一行(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">nyy</td>      <td>n 为数字。复制光标所在的向下 n 列，例如 20yy 则是复制 20 列(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">y1G</td>      <td>复制游标所在列到第一列的所有数据</td>    </tr>     <tr>     <td style="text-align: center;">yG</td>      <td>复制游标所在列到最后一列的所有数据</td>    </tr>     <tr>     <td style="text-align: center;">y0</td>      <td>复制光标所在的那个字符到该行行首的所有数据</td>    </tr>     <tr>     <td style="text-align: center;">y$</td>      <td>复制光标所在的那个字符到该行行尾的所有数据</td>    </tr>     <tr>     <td style="text-align: center;">p, P</td>      <td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">J</td>      <td>将光标所在列与下一列的数据结合成同一列</td>    </tr>     <tr>     <td style="text-align: center;">c</td>      <td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td>    </tr>     <tr>     <td style="text-align: center;">u</td>      <td>复原前一个动作。(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">[Ctrl]+r</td>      <td>重做上一个动作。(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td colspan="2">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td>    </tr>     <tr>     <td style="text-align: center;">.</td>      <td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (<span><font color="blue">常用</font></span>)</td>    </tr>    </tbody></table>  <ul><li>第二部份：一般模式切换到编辑模式的可用的按钮说明  </li></ul><p><table bgcolor="lightyellow" border="1" cellpadding="3" cellspacing="0" width="95%">    <tbody>    <tr bgcolor="#182448">     <td colspan="2" style="color: rgb(0, 0, 136); font-size: 1.1em; text-align: center;"><font color="red">进入插入或取代的编辑模式</font></td>    </tr>     <tr>     <td style="text-align: center;" width="120">i, I</td>      <td>进入插入模式(Insert mode)：<br> i 为『从目前光标所在处插入』， I 为『在目前所在行的第一个非空格符处开始插入』。 (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">a, A</td>      <td>进入插入模式(Insert mode)：<br> a 为『从目前光标所在的下一个字符处开始插入』， A 为『从光标所在行的最后一个字符处开始插入』。(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">o, O</td>      <td>进入插入模式(Insert mode)：<br> 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处插入新的一行』； O 为在目前光标所在处的上一行插入新的一行！(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">r, R</td>      <td>进入取代模式(Replace mode)：<br> r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td colspan="2">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td>    </tr>     <tr>     <td style="text-align: center;">[Esc]</td>      <td>退出编辑模式，回到一般模式中(<span><font color="blue">常用</font></span>)</td>    </tr>    </tbody></table>  </p><ul><li>第三部份：一般模式切换到指令列模式的可用的按钮说明  </li></ul><p><table bgcolor="lightyellow" border="1" cellpadding="3" cellspacing="0" width="95%">    <tbody>    <tr bgcolor="#182448">     <td colspan="2" style="color: rgb(0, 0, 136); font-size: 1.1em; text-align: center;"><font color="red">指令列的储存、离开等指令</font></td>    </tr>     <tr>     <td style="text-align: center;" width="160">:w</td>      <td>将编辑的数据写入硬盘档案中(<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">:w!</td>      <td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td>    </tr>     <tr>     <td style="text-align: center;">:q</td>      <td>离开 vi (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">:q!</td>      <td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td>    </tr>     <tr>     <td colspan="2">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td>    </tr>     <tr>     <td style="text-align: center;">:wq</td>      <td>储存后离开，若为 :wq! 则为强制储存后离开 (<span><font color="blue">常用</font></span>)</td>    </tr>     <tr>     <td style="text-align: center;">ZZ</td>      <td>这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！</td>    </tr>     <tr>     <td style="text-align: center;">:w [filename]</td>      <td>将编辑的数据储存成另一个档案（类似另存新档）</td>    </tr>     <tr>     <td style="text-align: center;">:r [filename]</td>      <td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td>    </tr>     <tr>     <td style="text-align: center;">:n1,n2 w [filename]</td>      <td>将 n1 到 n2 的内容储存成 filename 这个档案。</td>    </tr>     <tr>     <td style="text-align: center;">:! command</td>      <td>暂时离开 vi 到指令列模式下执行 command 的显示结果！例如<br> 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！</td>    </tr>     <tr bgcolor="#182448">     <td colspan="2" style="color: rgb(0, 0, 136); font-size: 1.1em; text-align: center;"><font color="#FFFFFF">vim 环境的变更</font></td>    </tr>     <tr>     <td style="text-align: center;">:set nu</td>      <td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td>    </tr>     <tr>     <td style="text-align: center;">:set nonu</td>      <td>与 set nu 相反，为取消行号！</td>    </tr>    </tbody></table>Tips：<font color="blue">在 vi 中，『数字』是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</font>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前～那我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;amp;quality=80&amp;amp;size=b9999_10000&amp;amp;sec=1556877579251&amp;amp;di=5e90827791864d98cf334d331e694cd0&amp;amp;imgtype=0&amp;amp;src=http%3A%2F%2Fwww.bkjia.com%2Fuploads%2Fallimg%2F160907%2F0H9545261-0.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>WSL(Windows Subsystem for Linux)</title>
    <link href="http://yoursite.com/2018/11/18/WSL-Windows-Subsystem-for-Linux/"/>
    <id>http://yoursite.com/2018/11/18/WSL-Windows-Subsystem-for-Linux/</id>
    <published>2018-11-18T14:52:49.000Z</published>
    <updated>2018-11-18T14:56:14.858Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/11/18/5bf12c36a29e9.jpg" alt="image"><br><a id="more"></a>  </p><blockquote><p> 有关WSL的介绍这里就不做解释了。另外，本文仅适用于win10 build 16215以及之后的版本，之前的版本可参考<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-win10#for-anniversary-update-and-creators-update-install-using-lxrun" target="_blank" rel="noopener">官方链接</a>。<br> （可使用“<code>winver</code>”命令查看windows版本号）<br> <img src="https://i.loli.net/2018/11/18/5bf12fc8b50d2.png" alt="image">  </p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li>控制面板-&gt;程序和功能-&gt;启用或关闭Windows功能-&gt;勾选 适用于Linux的Windows子系统<br><img src="https://i.loli.net/2018/11/18/5bf1314da1885.png" alt="image"></li><li>重启电脑  </li><li>打开应用商城搜索“WSL”，可根据自己需求选择安装一个或多个Linux系统：<img src="https://i.loli.net/2018/11/18/5bf13262c2092.png" alt="image">  </li><li>安装完成后可在开始菜单里找到快捷方式并启动，第一次运行需要等待安装并设置用户名、密码。<br><img src="https://i.loli.net/2018/11/18/5bf1333421105.png" alt="image"><br>除此以外，在cmd中使用以下几个命令都可以运行WSL：<br><code>wsl 或者 bash</code><br><code>wsl [command]或者bash -c [command]</code><br>Linux系统名称（如：ubuntu），这跟上面在开始菜单里启动是一样的其中，前两种方式会运行默认的linux系统，当你安装多个linux系统之后可以使用wslconfig来指定<h3 id="使用wslconfig命令进行管理"><a href="#使用wslconfig命令进行管理" class="headerlink" title="使用wslconfig命令进行管理"></a>使用wslconfig命令进行管理</h3></li><li>设置默认运行的linux系统<br><code>wslconfig /setdefault &lt;DistributionName&gt;</code><br>正如上面所说，如果执行<code>wslconfig /setdefault ubuntu</code>，那么执行bash命令则会运行ubuntu</li><li>卸载linux系统<br><code>wslconfig /unregister &lt;DistributionName&gt;</code><br>当系统出现问题，我们可以卸载后重新安装。如：<code>wslconfig /unregeister ubuntu</code></li><li>查看已安装的linux系统<br><code>wslconfig /list</code>  <h3 id="使用wslconfig命令进行管理-1"><a href="#使用wslconfig命令进行管理-1" class="headerlink" title="使用wslconfig命令进行管理"></a>使用wslconfig命令进行管理</h3>当我们运行WSL时，它会用第一次运行时输入的用户名登陆，如果想改为其他用户，可以（以ubuntu为例）：  <pre><code>ubuntu config --default-user root  这样，以后再运行ubuntu它就会默认以root登陆。此外还可以“ubuntu /?”查看其更多使用方法。</code></pre><h3 id="WSL文件系统与本地文件系统互相访问"><a href="#WSL文件系统与本地文件系统互相访问" class="headerlink" title="WSL文件系统与本地文件系统互相访问"></a>WSL文件系统与本地文件系统互相访问</h3></li><li>WSL中访问本地文件在“/mnt”目录下有“c”、“d”、“e”等文件夹，分别表示本地的C盘、D盘、E盘，直接cd到相应路径下即可。  </li><li>本地访问WSL的根目录微软强烈不建议在外部对WSL文件系统进行更改，所以未公开WSL所在的根目录。毕竟有时候我们需要直接读取里面的很多文件（比如说在某个IDE里面设置include path为WSL的/usr/include），如果每次都在WSL里cp命令将其拷贝到本地又太麻烦。下面是其根目录（以ubuntu为例，版本不同可能会有略微差别）：<br><img src="https://i.loli.net/2018/11/18/5bf152e163903.png" alt="image"><br><code>(C:\Users\XXXX\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs)</code>  </li></ol><p><img src="https://i.loli.net/2018/11/18/5bf15888cda6c.png" alt="image">  </p><h4 id="到此为止你就可以在-Windows-使用-Linux-啦，也不用装双系统，麻烦的双系统切换，也不用担心虚拟机的性能损耗好了接下来就和正常玩shell一样了，尽情的享受运行WSL吧（对了，我图里用的是-cmder）"><a href="#到此为止你就可以在-Windows-使用-Linux-啦，也不用装双系统，麻烦的双系统切换，也不用担心虚拟机的性能损耗好了接下来就和正常玩shell一样了，尽情的享受运行WSL吧（对了，我图里用的是-cmder）" class="headerlink" title="到此为止你就可以在 Windows 使用 Linux 啦，也不用装双系统，麻烦的双系统切换，也不用担心虚拟机的性能损耗好了接下来就和正常玩shell一样了，尽情的享受运行WSL吧（对了，我图里用的是 cmder）"></a>到此为止你就可以在 Windows 使用 Linux 啦，也不用装双系统，麻烦的双系统切换，也不用担心虚拟机的性能损耗好了接下来就和正常玩shell一样了，尽情的享受运行WSL吧（对了，我图里用的是 cmder）</h4>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/11/18/5bf12c36a29e9.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记百大东合水卡破解</title>
    <link href="http://yoursite.com/2018/10/02/%E8%AE%B0%E7%99%BE%E5%A4%A7%E4%B8%9C%E5%90%88%E6%B0%B4%E5%8D%A1%E7%A0%B4%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/10/02/记百大东合水卡破解/</id>
    <published>2018-10-02T07:11:15.000Z</published>
    <updated>2018-11-07T08:18:02.580Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.loli.net/2018/10/02/5bb2d9aaa7d37.png" alt="image"><br><a id="more"></a>  </p><h2 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h2><h4 id="1-通过多次刷取，使卡内金额发生改变，从而对比发现数据所在扇区"><a href="#1-通过多次刷取，使卡内金额发生改变，从而对比发现数据所在扇区" class="headerlink" title="1. 通过多次刷取，使卡内金额发生改变，从而对比发现数据所在扇区"></a>1. 通过多次刷取，使卡内金额发生改变，从而对比发现数据所在扇区</h4><h4 id="2-现在把数据块拿出来单独分析"><a href="#2-现在把数据块拿出来单独分析" class="headerlink" title="2. 现在把数据块拿出来单独分析"></a>2. 现在把数据块拿出来单独分析</h4><p><img src="https://i.loli.net/2018/10/02/5bb2daa614d84.png" alt="image">  </p><h4 id="3-计算"><a href="#3-计算" class="headerlink" title="3.计算"></a>3.计算</h4><h5 id="我们以第一条数据为例"><a href="#我们以第一条数据为例" class="headerlink" title="我们以第一条数据为例"></a>我们以第一条数据为例</h5><blockquote><p><strong>金额位</strong>（i1、i2）  </p><blockquote><p>金额：<strong>68.35</strong><br>将其转换为十六进制就是 <strong><code>1AB3</code></strong> 接着看一下数据（惊喜有没有）</p><p><img src="https://i.loli.net/2018/10/02/5bb2dc4004586.png" alt="image"><br>倒过来就是 <strong><code>B31A</code></strong> 与 i1、i2 相同<br>这样我们的金额位就简单得到了，下面折腾校验位</p></blockquote></blockquote><blockquote><p><strong>校验位</strong>（checksum）  </p><blockquote><p> 按位取反（事实证明这次破解中没有用到）</p><pre><code>B31A 二进制=&gt;1011001100011010       取反=&gt;0100110011100101           =&gt;4CE5（ps:刚开始我的思路就是以上的按照金额来按位取反，实验证明没P用，过于沙雕，不过鉴于有的卡还是会用到这样的方法，写了就不删了吧）</code></pre><p><strong>下面换个思路</strong><br>我们将金额位和校验位分别转换成十进制<br>金额位：<br><code>B3</code> 转换为十进制：179<br><code>1A</code> 转换为十进制：26  </p><p>校验位：<br><code>FC</code> 转换为十进制：252  </p><p>再将两个金额位的十进制数求和<br>179 + 26 = 205  </p><p>这里先说明一下思路：金额前后两位分别转十进制， 求和，与校验位十进制 差或者和为一个<code>定值</code>，基本上大多数水卡都是这个校验算法。<br>我这里试验过了是以差作为一个定值，所以我就直接计算了：<br>252 - 205 = 47<br>再把结果转成十六进制：<strong><code>2F</code></strong>，这就是我这张卡的<code>定值</code>了。 </p><p>现在我们就可以算校验位了,将金额位的和再与定值相加：<br>B3 + 1A = CD<br>CD + 2F = FC  </p><p>以上 <code>FC</code> 即是计算出来的校验位，我们来和数据中的对比一下 </p><p><img src="https://i.loli.net/2018/10/02/5bb2e8590ce5f.png" alt="image">  </p><p>方法到此结束，我们来看一看成果：<br><img src="https://i.loli.net/2018/10/02/5bb2e92397ebf.jpg" alt="image"><br>(注：本篇文章属于兴趣学习)  </p></blockquote></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://i.loli.net/2018/10/02/5bb2d9aaa7d37.png&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/10/02/hello-world/"/>
    <id>http://yoursite.com/2016/10/02/hello-world/</id>
    <published>2016-10-02T07:11:15.000Z</published>
    <updated>2018-10-17T07:12:24.564Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
