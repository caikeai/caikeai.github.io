<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vim 快捷键 - 《鸟叔的 Linux 私房菜》]]></title>
    <url>%2F2019%2F05%2F03%2FVim-%E5%BF%AB%E6%8D%B7%E9%94%AE-%E3%80%8A%E9%B8%9F%E5%8F%94%E7%9A%84-Linux-%E7%A7%81%E6%88%BF%E8%8F%9C%E3%80%8B%2F</url>
    <content type="text"><![CDATA[第一部份：一般模式可用的按钮说明，光标移动、复制贴上、搜寻取代等 移动光标的方法 h 或 向左箭头键(←) 光标向左移动一个字符 j 或 向下箭头键(↓) 光标向下移动一个字符 k 或 向上箭头键(↑) 光标向上移动一个字符 l 或 向右箭头键(→) 光标向右移动一个字符 如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 &quot;30j&quot; 或 &quot;30↓&quot; 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！ [Ctrl] + [f] 屏幕『向下』移动一页，相当于 [Page Down]按键 (常用) [Ctrl] + [b] 屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用) [Ctrl] + [d] 屏幕『向下』移动半页 [Ctrl] + [u] 屏幕『向上』移动半页 + 光标移动到非空格符的下一列 - 光标移动到非空格符的上一列 n&lt;space&gt; 那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20&lt;space&gt; 则光标会向后面移动 20 个字符距离。 0 或功能键[Home] 这是数字『 0 』：移动到这一行的最前面字符处 (常用) $ 或功能键[End] 移动到这一行的最后面字符处(常用) H 光标移动到这个屏幕的最上方那一行的第一个字符 M 光标移动到这个屏幕的中央那一行的第一个字符 L 光标移动到这个屏幕的最下方那一行的第一个字符 G 移动到这个档案的最后一行(常用) nG n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu) gg 移动到这个档案的第一行，相当于 1G 啊！ (常用) n&lt;Enter&gt; n 为数字。光标向下移动 n 行(常用) 搜寻与取代 /word 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 /vbird 即可！ (常用) ?word 向光标之上寻找一个字符串名称为 word 的字符串。 n 这个 n 是英文按键。代表『重复前一个搜寻的动作』。举例来说， 如果刚刚我们执行 /vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！ N 这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 /vbird 后，按下 N 则表示『向上』搜寻 vbird 。 使用 /word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！ :n1,n2s/word1/word2/g n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s/vbird/VBIRD/g』。(常用) :1,$s/word1/word2/g 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用) :1,$s/word1/word2/gc 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用) 删除、复制与贴上 x, X 在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用) nx n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。 dd 删除游标所在的那一整列(常用) ndd n 为数字。删除光标所在的向下 n 列，例如 20dd 则是删除 20 列 (常用) d1G 删除光标所在到第一行的所有数据 dG 删除光标所在到最后一行的所有数据 d$ 删除游标所在处，到该行的最后一个字符 d0 那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符 yy 复制游标所在的那一行(常用) nyy n 为数字。复制光标所在的向下 n 列，例如 20yy 则是复制 20 列(常用) y1G 复制游标所在列到第一列的所有数据 yG 复制游标所在列到最后一列的所有数据 y0 复制光标所在的那个字符到该行行首的所有数据 y$ 复制光标所在的那个字符到该行行尾的所有数据 p, P p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用) J 将光标所在列与下一列的数据结合成同一列 c 重复删除多个数据，例如向下删除 10 行，[ 10cj ] u 复原前一个动作。(常用) [Ctrl]+r 重做上一个动作。(常用) 这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！ . 不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用) 第二部份：一般模式切换到编辑模式的可用的按钮说明 进入插入或取代的编辑模式 i, I 进入插入模式(Insert mode)： i 为『从目前光标所在处插入』， I 为『在目前所在行的第一个非空格符处开始插入』。 (常用) a, A 进入插入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始插入』， A 为『从光标所在行的最后一个字符处开始插入』。(常用) o, O 进入插入模式(Insert mode)： 这是英文字母 o 的大小写。o 为『在目前光标所在的下一行处插入新的一行』； O 为在目前光标所在处的上一行插入新的一行！(常用) r, R 进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用) 上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！ [Esc] 退出编辑模式，回到一般模式中(常用) 第三部份：一般模式切换到指令列模式的可用的按钮说明 指令列的储存、离开等指令 :w 将编辑的数据写入硬盘档案中(常用) :w! 若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！ :q 离开 vi (常用) :q! 若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。 注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～ :wq 储存后离开，若为 :wq! 则为强制储存后离开 (常用) ZZ 这是大写的 Z 喔！若档案没有更动，则不储存离开，若档案已经被更动过，则储存后离开！ :w [filename] 将编辑的数据储存成另一个档案（类似另存新档） :r [filename] 在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面 :n1,n2 w [filename] 将 n1 到 n2 的内容储存成 filename 这个档案。 :! command 暂时离开 vi 到指令列模式下执行 command 的显示结果！例如 『:! ls /home』即可在 vi 当中察看 /home 底下以 ls 输出的档案信息！ vim 环境的变更 :set nu 显示行号，设定之后，会在每一行的前缀显示该行的行号 :set nonu 与 set nu 相反，为取消行号！ Tips：在 vi 中，『数字』是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前～那我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。]]></content>
  </entry>
  <entry>
    <title><![CDATA[WSL(Windows Subsystem for Linux)]]></title>
    <url>%2F2018%2F11%2F18%2FWSL-Windows-Subsystem-for-Linux%2F</url>
    <content type="text"><![CDATA[有关WSL的介绍这里就不做解释了。另外，本文仅适用于win10 build 16215以及之后的版本，之前的版本可参考官方链接。 （可使用“winver”命令查看windows版本号） 安装 控制面板-&gt;程序和功能-&gt;启用或关闭Windows功能-&gt;勾选 适用于Linux的Windows子系统 重启电脑 打开应用商城搜索“WSL”，可根据自己需求选择安装一个或多个Linux系统： 安装完成后可在开始菜单里找到快捷方式并启动，第一次运行需要等待安装并设置用户名、密码。除此以外，在cmd中使用以下几个命令都可以运行WSL：wsl 或者 bashwsl [command]或者bash -c [command]Linux系统名称（如：ubuntu），这跟上面在开始菜单里启动是一样的 其中，前两种方式会运行默认的linux系统，当你安装多个linux系统之后可以使用wslconfig来指定使用wslconfig命令进行管理 设置默认运行的linux系统wslconfig /setdefault &lt;DistributionName&gt;正如上面所说，如果执行wslconfig /setdefault ubuntu，那么执行bash命令则会运行ubuntu 卸载linux系统wslconfig /unregister &lt;DistributionName&gt;当系统出现问题，我们可以卸载后重新安装。如：wslconfig /unregeister ubuntu 查看已安装的linux系统wslconfig /list 使用wslconfig命令进行管理当我们运行WSL时，它会用第一次运行时输入的用户名登陆，如果想改为其他用户，可以（以ubuntu为例）： ubuntu config --default-user root 这样，以后再运行ubuntu它就会默认以root登陆。此外还可以“ubuntu /?”查看其更多使用方法。 WSL文件系统与本地文件系统互相访问 WSL中访问本地文件 在“/mnt”目录下有“c”、“d”、“e”等文件夹，分别表示本地的C盘、D盘、E盘，直接cd到相应路径下即可。 本地访问WSL的根目录 微软强烈不建议在外部对WSL文件系统进行更改，所以未公开WSL所在的根目录。毕竟有时候我们需要直接读取里面的很多文件（比如说在某个IDE里面设置include path为WSL的/usr/include），如果每次都在WSL里cp命令将其拷贝到本地又太麻烦。下面是其根目录（以ubuntu为例，版本不同可能会有略微差别）：(C:\Users\XXXX\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState\rootfs) 到此为止你就可以在 Windows 使用 Linux 啦，也不用装双系统，麻烦的双系统切换，也不用担心虚拟机的性能损耗好了接下来就和正常玩shell一样了，尽情的享受运行WSL吧（对了，我图里用的是 cmder）]]></content>
  </entry>
  <entry>
    <title><![CDATA[记百大东合水卡破解]]></title>
    <url>%2F2018%2F10%2F02%2F%E8%AE%B0%E7%99%BE%E5%A4%A7%E4%B8%9C%E5%90%88%E6%B0%B4%E5%8D%A1%E7%A0%B4%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[步骤：1. 通过多次刷取，使卡内金额发生改变，从而对比发现数据所在扇区2. 现在把数据块拿出来单独分析 3.计算我们以第一条数据为例 金额位（i1、i2） 金额：68.35将其转换为十六进制就是 1AB3 接着看一下数据（惊喜有没有） 倒过来就是 B31A 与 i1、i2 相同这样我们的金额位就简单得到了，下面折腾校验位 校验位（checksum） 按位取反（事实证明这次破解中没有用到） B31A 二进制=&gt;1011001100011010 取反=&gt;0100110011100101 =&gt;4CE5 （ps:刚开始我的思路就是以上的按照金额来按位取反，实验证明没P用，过于沙雕，不过鉴于有的卡还是会用到这样的方法，写了就不删了吧） 下面换个思路我们将金额位和校验位分别转换成十进制金额位：B3 转换为十进制：1791A 转换为十进制：26 校验位：FC 转换为十进制：252 再将两个金额位的十进制数求和179 + 26 = 205 这里先说明一下思路：金额前后两位分别转十进制， 求和，与校验位十进制 差或者和为一个定值，基本上大多数水卡都是这个校验算法。我这里试验过了是以差作为一个定值，所以我就直接计算了：252 - 205 = 47再把结果转成十六进制：2F，这就是我这张卡的定值了。 现在我们就可以算校验位了,将金额位的和再与定值相加：B3 + 1A = CDCD + 2F = FC 以上 FC 即是计算出来的校验位，我们来和数据中的对比一下 方法到此结束，我们来看一看成果：(注：本篇文章属于兴趣学习)]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2016%2F10%2F02%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
